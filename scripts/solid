#!/usr/bin/env python3
import os
import sys
from typing import List, Tuple
from argparse import ArgumentParser
from importlib import import_module

from solid import scad_render


def split_args(args: List[str]) -> Tuple[List[str], List[str]]:
    try:
        idx = args.index("--")
        return args[0:idx], args[idx + 1 :]
    except ValueError:
        pass

    return args, []


def main():
    from prints import check_module

    raw_args, raw_params = split_args(sys.argv[1:])

    parser = ArgumentParser(description="Build a solidpython definition.")
    parser.add_argument("module", nargs="+")
    parser.add_argument("--fn", type=int, default=20)
    parser.add_argument("--out", type=str)
    parser.add_argument("--out-default", action="store_true")
    args = parser.parse_args(args=raw_args)

    mod_name = args.module[0]
    mod = import_module("prints.{}".format(mod_name))
    check_module(mod)

    param_parser = ArgumentParser(description=mod.__doc__)
    for k, v in mod.Params.__annotations__.items():
        param_parser.add_argument("--{}".format(k), type=v)

    params = mod.Params()
    for k, v in param_parser.parse_args(raw_params).__dict__.items():
        if v is not None:
            setattr(params, k, v)

    outfile = sys.stdout
    if args.out_default:
        outfile_dir = os.path.realpath(
            os.path.join(
                os.path.dirname(__file__),
                "..",
                "out",
                mod_name,
            )
        )
        try:
            os.mkdir(outfile_dir)
        except FileExistsError:
            pass
        outfile_path = os.path.join(outfile_dir, f"{mod_name}.scad")
        outfile = open(outfile_path, "w+")
    elif args.out:
        outfile = open(args.out, "w+")

    outfile.write("$fn = {};\n".format(args.fn))
    outfile.write(scad_render(mod.main(params)))

    if outfile != sys.stdout:
        outfile.close()


if __name__ == "__main__":
    sys.path.insert(0, os.path.realpath(os.path.join(os.path.dirname(__file__), "..")))
    main()
